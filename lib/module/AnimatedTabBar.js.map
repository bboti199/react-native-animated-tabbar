{"version":3,"sources":["AnimatedTabBar.tsx"],"names":["Animated","addWhitelistedNativeProps","width","stroke","backgroundColor","AnimatedTabBar","props","navigation","tabs","duration","easing","isReactNavigation5","state","index","routes","ket","navigationIndex","navigationKey","key","safeArea","selectedIndex","containerStyle","barStyle","paddingBottom","bottom","getRouteLabel","route","descriptors","options","title","undefined","name","getRouteTabConfigs","handleSelectedIndexChange","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","CommonActions","navigate","onTabPress","setValue","args","map","configs","label"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport { View, StyleProp, ViewStyle } from 'react-native';\nimport Animated, { useCode, onChange, call } from 'react-native-reanimated';\nimport { useValues } from 'react-native-redash';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport { CommonActions, Route } from '@react-navigation/native';\nimport { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport { AnimatedTabBarItem } from './item';\nimport { TabsConfigsType, AnimationConfigProps } from './types';\n\nAnimated.addWhitelistedNativeProps({\n  width: true,\n  stroke: true,\n  backgroundColor: true,\n});\n\ninterface AnimatedTabBarProps extends BottomTabBarProps, AnimationConfigProps {\n  /**\n   * Tabs configurations.\n   */\n  tabs: TabsConfigsType;\n  barStyle: StyleProp<ViewStyle>;\n}\n\nexport const AnimatedTabBar = (props: AnimatedTabBarProps) => {\n  // props\n  const { navigation, tabs, duration, easing } = props;\n\n  // variables\n  const isReactNavigation5 = props.state ? true : false;\n  // @ts-ignore\n  const {\n    routes,\n    index: navigationIndex,\n    key: navigationKey,\n  }: { routes: Route<string>[]; index: number; key: string } = useMemo(() => {\n    if (isReactNavigation5) {\n      return props.state;\n    } else {\n      return {\n        // @ts-ignore\n        index: props.navigation.state.index,\n        // @ts-ignore\n        routes: props.navigation.state.routes,\n        ket: '',\n      };\n    }\n  }, [props, isReactNavigation5]);\n  const safeArea = useSafeArea();\n  const [selectedIndex] = useValues([0], []);\n\n  // styles\n  const containerStyle = useMemo(\n    () => [\n      props.barStyle,\n      {\n        paddingBottom: safeArea.bottom,\n      },\n    ],\n    [safeArea, props.barStyle]\n  );\n\n  // callbacks\n  const getRouteLabel = (route: Route<string>) => {\n    if (isReactNavigation5) {\n      const { descriptors } = props;\n      const { options } = descriptors[route.key];\n      return options.title !== undefined ? options.title : route.name;\n    } else {\n      return route.key;\n    }\n  };\n\n  const getRouteTabConfigs = (route: Route<string>) => {\n    if (isReactNavigation5) {\n      return tabs[route.name];\n    } else {\n      return tabs[route.key];\n    }\n  };\n\n  const handleSelectedIndexChange = (index: number) => {\n    if (isReactNavigation5) {\n      const { key, name } = routes[index];\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...CommonActions.navigate(name),\n          target: navigationKey,\n        });\n      }\n    } else {\n      // @ts-ignore\n      const { onTabPress } = props;\n      onTabPress({ route: routes[index] });\n    }\n  };\n\n  // effects\n  useEffect(() => {\n    // @ts-ignore\n    selectedIndex.setValue(navigationIndex);\n  }, [navigationIndex, selectedIndex]);\n\n  useCode(\n    () =>\n      onChange(\n        selectedIndex,\n        call([selectedIndex], args => {\n          handleSelectedIndexChange(args[0]);\n        })\n      ),\n    [selectedIndex]\n  );\n\n  // render\n  return (\n    <View style={containerStyle}>\n      {routes.map((route, index) => {\n        const configs = getRouteTabConfigs(route);\n        const label = getRouteLabel(route);\n        return (\n          <AnimatedTabBarItem\n            key={route.key}\n            index={index}\n            selectedIndex={selectedIndex}\n            label={label}\n            duration={duration}\n            easing={easing}\n            {...configs}\n          />\n        );\n      })}\n    </View>\n  );\n};\n"]}